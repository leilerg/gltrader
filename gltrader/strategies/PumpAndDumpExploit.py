import os

from gltrader.strategy import Strategy
from gltrader.action import *


import logging
os.environ['LOG_FILE'] = os.path.dirname(os.path.abspath(__file__)) + '/../../gltrader.log'
log = logging.getLogger("strategiesLog")
  
log.setLevel(logging.DEBUG)
  
# Create handlers
# File handler
fh = logging.FileHandler(os.environ["LOG_FILE"])
fh.setLevel(logging.DEBUG)
# Console handler
ch = logging.StreamHandler()
ch.setLevel(logging.INFO)
# Formatter, to be added to the file handler
formatter = logging.Formatter("%(levelname)s - %(asctime)s - %(name)s: %(message)s")
fh.setFormatter(formatter)
ch.setFormatter(formatter)
  
# Add handler to logger
log.addHandler(fh)
log.addHandler(ch)

from threading import currentThread

import builtins



class PumpAndDumpExploit(Strategy):
    #===========================================================================
    # Executes a "TradeUp" action if the 24 hr trailing volume change reaches a certain threshold
    # 
    # :returns: (Action) The MinTradeUp Action, 
    # which executes 2 trades and returns a tuple (Order1, Order2) when its "do" method is called
    #===========================================================================
    name = "PumpAndDumpExploit"

    def run(self):
        # Log volumes...
        log.debug("Thread ID: " + str(currentThread().ident) +
                  ", Market: {:>5}".format(self.market.name) + 
                  ", 24hr AvgVol= {:20.8f}".format(self.market.avgVolPerHourPreviousDay()) +
                  ", LastHr Vol= {:20.8f}".format(self.market.volumeLastHr()) +
                  ", Ratio= {:7.3f}".format(self.market.volumeLastHr()/self.market.avgVolPerHourPreviousDay()))


        # Default - Do not execute trade 
        executeTrade = False
        # Flag - Recent volume increase
        actionDetected = False
        # Flag - Is it a pump?
        pumpDetected = False
        
        

        # Check if there's increased market action        
        if self.market.volumeLastHr() > 10*self.market.avgVolPerHourPreviousDay():
            actionDetected = True
            
        # Check there's an actual price pump, not dump
        if self.market.last() > self.market.previousDayLastClose() and self.market.last() > self.market.high():
            pumpDetected = True
            
            

        #print("Market: " + self.market.name + ", can trade: " + str(self.market.canTrade()))

       
        # All checks complete - Set the final flag
        executeTrade = actionDetected and pumpDetected and self.market.canTrade()

        #=======================================================================
        # if self.market.name == "LTC":
        #     executeTrade = True and self.market.canTrade()
        #=======================================================================


        #=======================================================================
        # print("Market: {:>5}".format(self.market.name) + 
        #       ", 24hr AvgVol= {:20.8f}".format(self.market.avgVolPerHourPreviousDay()) +
        #       ", LastHr Vol= {:20.8f}".format(self.market.volumeLastHr()) +
        #       ", Ratio= {:7.3f}".format(self.market.volumeLastHr()/self.market.avgVolPerHourPreviousDay()))
        #=======================================================================

        if executeTrade:
            #===================================================================
            # print()
            # print("WEEEEEE.... TRADE should be EXECUTED!!!")
            # print("Market: "+ self.market.name)
            # print("Average 24h volume: " + str(self.market.avgVolPerHourPreviousDay()))
            # print("Last hour volume: " + str(self.market.volumeLastHr()))
            # print()
            #===================================================================
            log.info("Market: {:>5}".format(self.market.name)  + 
                    " - PUMP 'n' DUMP detected - EXECUTING TRADE!")
            
            
            
            
            # Take the appropriate action
            actionResult = PumpAndDumpExploitTrade(self.market)
            
            return actionResult


